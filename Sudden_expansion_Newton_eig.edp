//////////////////////////////////////////////////////////////////////////////////
//primary stability of a circular cylinder at Reynolds 100
load "MUMPS"
load "iovtk"
include "./freefem_matlab_octave_plot-public/release-v2.0/demos/ffmatlib.idp"
real Re=100.;
real ni=1/Re;


////// Mesh
int ncil=150, ns=5, n1=20, n2=10;
int n=8;
real xinfm=-25., xinfv=50., yinf=20.;
real x1m=-5.,x1v=17.,y1=2.5;
real x2m=-8.,x2v=30.,y2=5;

// cylinder
int bclat=4; int bcinlet=1; int bcoutflow=3;
int bcwall=2;

border cilindro(t=0,2*pi){ x=cos(t)*0.5;y=0.5*sin(t);label=2;}
border cil2(t=0,2*pi){ x=cos(t)*0.57;y=0.57*sin(t);label=0;}
border inlet(t=0,1){ x=xinfm;y=yinf*(1-2*t);label=1;}
border latinf(t=0,1){ x=xinfm+(xinfv-xinfm)*t;y=-yinf;label=4;}
border outlet(t=0,1){ x=xinfv;y=-yinf*(1-2*t);label=3;}
border latsup(t=0,1){ x=xinfv-(xinfv-xinfm)*t;y=yinf;label=4;}
border a1(t=0,1){ x=x1m;y=y1*(1-2*t);label=0;}
border a2(t=0,1){ x=x1m+(x1v-x1m)*t;y=-y1;label=0;}
border a3(t=0,1){ x=x1v;y=-y1*(1-2*t);label=0;}
border a4(t=0,1){ x=x1v-(x1v-x1m)*t;y=+y1;label=0;}
border b1(t=0,1){ x=x2m;y=y2*(1-2*t);label=0;}
border b2(t=0,1){ x=x2m+(x2v-x2m)*t;y=-y2;label=0;}
border b3(t=0,1){ x=x2v;y=-y2*(1-2*t);label=0;}
border b4(t=0,1){ x=x2v-(x2v-x2m)*t;y=+y2;label=0;}

mesh Th=buildmesh(inlet(2*yinf/n*ns)+latinf((xinfv-xinfm)/n*ns)+outlet(2*yinf/n*ns)+latsup((xinfv-xinfm)/n*ns)+cil2(-100)+cilindro(-300)+a1(n1/n*2*y1)+a2(n1/n*(x1v-x1m))+a3(n1/n*2*y1)+a4(n1/n*(x1v-x1m))+b1(2*y2/n*n2)+b2((x2v-x2m)/n*n2)+b3(2*y2/n*n2)+b4((x2v-x2m)/n*n2));
plot(Th,wait=1);

savemesh(Th, "Cyl.msh");
//////////////////////////////////////////////////////////////////////////////////
real eps=1.e-7;

fespace Vh(Th,P2); //spazio di elementi finiti per velocità e velocità di perturbazione
fespace Ph(Th,P1); //spazio di elementi finiti per pressione e pressione di perturbazione
fespace VPh(Th,[P2,P2,P1]);
//u1 u2 p campo effettivo
//du1,du2, dp campo di perturbazione
// v1,v2, q funzion test
VPh [u1,u2,p]; //soluzione
VPh [v1,v2,q]; //test
VPh [du1,du2,dp]; //perturbazione

//macros

macro div(u1,u2) (dx(u1)+dy(u2)) //
macro grad(u1,u2) [dx(u1),dy(u2)] //
macro ugrad(u1,u2,v) (u1*dx(v) + u2*dy(v)) //
macro Ugrad(u1,u2,v1,v2) [ugrad(u1,u2,v1),ugrad(u1,u2,v2)] //

//Stokes' flow for initial guessing
solve Stokes ([u1, u2, p],[v1, v2, q], solver=sparsesolver)=
int2d(Th)(ni*(dx(u1)*dx(v1)+dx(u2)*dx(v2)+dy(u1)*dy(v1)+dy(u2)*dy(v2))-p*div(v1,v2)+q*div(u1,u2)+p*q*eps)

+on(bcinlet, u1=1,u2=0)
+on(bcwall, u1=0,u2=0);

//Newton's Navier Stokes solvers

//Navier Stokes
varf NS ([du1,du2,dp],[v1,v2,q])=

int2d(Th)(
  Ugrad(u1,u2,u1,u2)'*[v1,v2]
  +ni*(dx(u1)*dx(v1)+dx(u2)*dx(v2)+dy(u1)*dy(v1)+dy(u2)*dy(v2))
  -p*div(v1,v2)
  +q*div(u1,u2)+p*q*eps
);

//Navier Stokes perturbation

varf dNS([du1,du2,dp],[v1,v2,q])=

int2d(Th)(
  +ni*(dx(du1)*dx(v1)+dx(du2)*dx(v2)+dy(du1)*dy(v1)+dy(du2)*dy(v2))
  -dp*div(v1,v2)
  +q*div(du1,du2)+dp*q*eps
  +Ugrad(du1,du2,u1,u2)'*[v1,v2]
  +Ugrad(u1,u2,du1,du2)'*[v1,v2]
  )
  +on(bcinlet, du1=1,du2=0)
  +on(bcwall, du1=0,du2=0);


  int i=0;
  for (i=0;i<=20; i++){

    real[int] b=NS(0, VPh); // assemblo il vettore F(u_0)
    matrix SM=dNS(VPh,VPh); // assemblo la matrice dF(u_0)
    set(SM, solver=sparsesolver); //opzioni per la soluzione
    real[int] w = SM^-1*b; //risolve  dF(u_0)*w=F(u_0) ==> w=-du

    u1[] -= w; // un+1=un+du

    if(w.l2<5e-8) break; //controllo sul residuo
    cout << " iter = "<< i << "  " << w.l2 <<endl;

  }

//plot
/*  plot(u1,fill=1,wait=0,value=1,cmm="final U1");
  plot(u2,fill=1,wait=0,value=1,cmm="final U2");
  plot(p,fill=1,wait=0,value=1,cmm="final Pressure");*/

//save baseflow
int[int] Order = [1,1,1];
string DataName = "u";
savevtk("./CylRe"+Re+".vtu", Th, u1,u2,p, dataname=DataName, order=Order);

VPh [ub1,ub2,pb]=[u1,u2,p];

/////Linear stability


VPh [up1,up2,pp]; //perturbated flow

//matrixB
varf b([up1,up2,pp],[v1,v2,q], solver=sparsesolver)=int2d(Th)(up1*v1+up2*v2);
matrix B=b(VPh,VPh);


//shif invert point
real S=0.05+i*0.78;

//matix A
varf opp([up1,up2,pp],[v1,v2,q], solver=sparsesolver)=
-int2d(Th)(Ugrad(up1,up2,ub1,ub2)'*[v1,v2] +Ugrad(up1,up2,ub1,ub2)'*[v1,v2])
+int2d(Th)(p*(dx(v1)+dy(v2)))
-int2d(Th)(ni*(dx(up1)*dx(v1)+dx(up2)*dx(v2)+dy(up1)*dy(v1)+dy(up2)*dy(v2)))
+int2d(Th)(q*(dx(up1)+dy(up2)))
-int2d(Th)(S*(up1*v1+up2*v2))
+on(bcwall, up1=0, up2=0)+
on(bcinlet, up1=0, up2=0);

matrix OP=opp(VPh,VPh);


//number of eigenvalues evaluated
real NEV=10;

// inizializing vectors for eigenvectors
real [int] reall(NEV);
real [int] imagl(NEV);


//eigenvalues/vectors evaluation
int k = EigenValue(OP,B,nev=NEV, sigma = S, value=reall, ivalue=imagl);
